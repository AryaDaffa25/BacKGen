from llm_inference.get_prompt_utility import *

def get_prompt_splitted_stc_zero_without_explanation(text,st_span,prompt_variant=1):
    if prompt_variant == 1:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text.\n\nInstructions:\n- The polarity output can only be 'positive' or 'negative'.\n\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nAnswer: "
        return prompt
    else:
        raise ValueError(f"You choose variant {prompt_variant} but we do not have it in get_prompt_splitted_stc_zero_without_explanation function. Please define your variant in that function.")

def get_prompt_splitted_stc_pk_without_explanation(text,st_span,pk_list,prompt_variant=1):
    if prompt_variant == 1:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. You are also provided with potentially useful sentences reflecting background knowledge, each associated with an underlying polarity.\n\nInstructions:\n- The polarity output can only be 'positive' or 'negative'.\n- Use the background knowledge to help determine the polarity.\n- Note the sentiment of each background sentence as it may assist in your reasoning.\n\n{write_pk_polarity_style(pk_list)}\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nAnswer: "
        return prompt
    if prompt_variant == 2:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. You are also provided with potentially useful sentences reflecting background knowledge.\n\nInstructions:\n- Use the background knowledge to help determine the polarity.\n- Note the sentiment of each background sentence as it may assist in your reasoning.\n- The polarity output can only be 'positive' or 'negative'.\n- The first word of your answer should be your final polarity classification.\n\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nBackground Knowledge:\n{write_pk(pk_list)}\nAnswer: "
        return prompt
    else:
        raise ValueError(f"You choose variant {prompt_variant} but we do not have it in get_prompt_splitted_stc_pk_without_explanation function. Please define your variant in that function.")

def get_prompt_splitted_stc_ex_without_explanation(text,st_span,negative_example_list,positive_example_list,prompt_variant=1):
    if prompt_variant == 1:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. You are also provided with some examples each paired with the the sentiment expressed by a specific target phrase.\n\nInstructions:\n- The polarity output can only be 'positive' or 'negative'.\n- Use the examples to help determine the polarity.\n\n{write_example_polarity_style(negative_example_list,positive_example_list)}\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nAnswer: "
        return prompt
    else:
        raise ValueError(f"You choose variant {prompt_variant} but we do not have it in get_prompt_splitted_stc_ex_without_explanation function. Please define your variant in that function.")

def get_prompt_splitted_stc_pk_ex_without_explanation(text,st_span,pk_list,negative_example_list,positive_example_list,prompt_variant=1):
    if prompt_variant == 1:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. You are also provided with potentially useful sentences reflecting background knowledge, each associated with an underlying polarity. Finally, you are provided with some examples each paired with the the sentiment expressed by a specific target phrase.\n\nInstructions:\n- The polarity output can only be 'positive' or 'negative'.\n- Use the background knowledge to help determine the polarity.\n- Note the sentiment of each background sentence as it may assist in your reasoning.\n- Use the examples to help determine the polarity.\n\n{write_pk_polarity_style(pk_list)}\n{write_example_polarity_style(negative_example_list,positive_example_list)}\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nAnswer: "
        return prompt
    else:
        raise ValueError(f"You choose variant {prompt_variant} but we do not have it in get_prompt_splitted_stc_pk_ex_without_explanation function. Please define your variant in that function.")

def get_prompt_splitted_stc_ex_pk_without_explanation(text,st_span,pk_list,negative_example_list,positive_example_list,prompt_variant=1):
    if prompt_variant == 1:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. You are also provided with some examples each paired with the the sentiment expressed by a specific target phrase. Finally, you are provided with potentially useful sentences reflecting background knowledge, each associated with an underlying polarity.\n\nInstructions:\n- The polarity output can only be 'positive' or 'negative'.\n- Use the examples to help determine the polarity.\n- Use the background knowledge to help determine the polarity.\n- Note the sentiment of each background sentence as it may assist in your reasoning.\n\n{write_example_polarity_style(negative_example_list,positive_example_list)}\n{write_pk_polarity_style(pk_list)}\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nAnswer: "
        return prompt
    else:
        raise ValueError(f"You choose variant {prompt_variant} but we do not have it in get_prompt_splitted_stc_ex_pk_without_explanation function. Please define your variant in that function.")

def get_prompt_splitted_stc_zero_with_explanation(text,st_span,prompt_variant=1):
    if prompt_variant == 1:
        prompt = f"Given the text and its sentiment phrase below,  please determine the sentiment subjectivity for the given sentiment phrase whether it is 'positive' or 'negative' and explain the reason in a single sentence.\nText = {text}\nSentiment Phrase = {st_span}\nAnswer = "
        return prompt
    elif prompt_variant == 2:
        prompt = f"Given the text and its sentiment phrase below,  please determine the sentiment subjectivity for the given sentiment phrase whether it is 'positive' or 'negative' (no 'neutral' option for the sentiment subjectivity) and explain the reason in a single sentence.\nText = {text}\nSentiment Phrase = {st_span}\nAnswer = "
        return prompt
    elif prompt_variant == 3:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. Then, provide a short explanation for your classification. The explanation should be clear and helpful for the user to understand the choice.\n\nInstructions:\n- The polarity output can only be 'positive' or 'negative'.\n\nInput:\n- Text: '{text}'\n-Target Phrase: '{st_span}'\n\nAnswer: "
        return prompt
    elif prompt_variant == 4:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. Then, provide a short explanation for your classification. The explanation should be clear and helpful for the user to understand the choice.\n\nInstructions:\n- The polarity output can only be 'positive' or 'negative'.\n- The first word of your answer should be your final polarity classification, then followed by your explanation.\n\nInput:\n- Text: '{text}'\n-Target Phrase: '{st_span}'\n\nAnswer: "
        return prompt
    else:
        raise ValueError(f"You choose variant {prompt_variant} but we do not have it in get_prompt_splitted_stc_zero_with_explanation function. Please define your variant in that function.")

def get_prompt_splitted_stc_pk_with_explanation(text,st_span,pk_list,prompt_variant=1):
    # For prompt_variant 2 and so on
    prompt_pk = write_pk(pk_list)
    # Prompt for each prompt_variant
    if prompt_variant == 1:
        prompt = f"Given the text and its sentiment phrase below,  please determine the sentiment subjectivity for the given sentiment phrase whether it is 'positive' or 'negative' and explain the reason in a single sentence. To help you do this task, we also provided a list of background knowledge about sentiment subjectivity stereotypes that you can use as the context when you classify the sentiment subjectivity of the sentiment phrase given and explain the reason for your classification result.\nText = {text}\nSentiment Phrase = {st_span}\nBackground Knowledge List = {str(pk_list)}\nAnswer = "
        return prompt
    elif prompt_variant == 2:
        prompt = f"Given the text and its sentiment phrase below,  please determine the sentiment subjectivity for the given sentiment phrase whether it is 'positive' or 'negative' (no 'neutral' option for the sentiment subjectivity) and explain the reason in a single sentence. To help you do this task, we also provided background knowledge about sentiment subjectivity stereotypes that you can use as the context when you classify the sentiment subjectivity of the sentiment phrase given and explain the reason for your classification result. Please do not refer to the background knowledge explicitly in your explanation as the user is not given the background knowledge.\n\nText = {text}\nSentiment Phrase = {st_span}\n\nBackground Knowledge =\n{prompt_pk}\nAnswer = "
        return prompt
    elif prompt_variant == 3:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. Then, provide a short explanation for your classification. You are also provided with potentially useful sentences reflecting background knowledge. The explanation should be clear and helpful for the user to understand the choice.\n\nInstructions:\n- Use the background knowledge to help determine the polarity.\n- Note the sentiment of each background sentence as it may assist in your reasoning.\n- The polarity output can only be 'positive' or 'negative'.\n- The user is not aware of the background knowledge, so you cannot refer to it explicitly in your explanation.\n\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nBackground Knowledge:\n{prompt_pk}\nAnswer: "
        return prompt
    elif prompt_variant == 4:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. Then, provide a short explanation for your classification. You are also provided with potentially useful sentences reflecting background knowledge. The explanation should be clear and helpful for the user to understand the choice.\n\nInstructions:\n- Use the background knowledge to help determine the polarity.\n- Note the sentiment of each background sentence as it may assist in your reasoning.\n- The polarity output can only be 'positive' or 'negative'.\n- The first word of your answer should be your final polarity classification, then followed by your explanation.\n- The user is not aware of the background knowledge, so you cannot refer to it explicitly in your explanation.\n\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nBackground Knowledge:\n{prompt_pk}\nAnswer: "
        return prompt
    else:
        raise ValueError(f"You choose variant {prompt_variant} but we do not have it in get_prompt_splitted_stc_pk_with_explanation function. Please define your variant in that function.")

def get_prompt_splitted_stc_pk_ex_with_explanation(text,st_span,pk_list,negative_example_list,positive_example_list,prompt_variant=1):
    # For prompt_variant 2 and so on
    prompt_pk = write_pk(pk_list)
    examples = write_example(negative_example_list,positive_example_list,prompt_variant)
    # Prompt for each prompt_variant
    if prompt_variant == 1:
        prompt = f"Given the text and its sentiment phrase below,  please determine the sentiment subjectivity for the given sentiment phrase whether it is 'positive' or 'negative' and explain the reason in a single sentence. To help you do this task, we also provided a list of background knowledge about sentiment subjectivity stereotypes and some examples of sentiment subjectivity of sentiment phrases from a particular text that you can use as the context when you classify the sentiment subjectivity of the sentiment phrase given and explain the reason for your classification result.\n\nText = {text}\nSentiment Phrase = {st_span}\n\nBackground Knowledge List =\n{str(pk_list)}\n\nExamples =\n{examples}\nAnswer = "
        return prompt
    elif prompt_variant == 2:
        prompt = f"Given the text and its sentiment phrase below,  please determine the sentiment subjectivity for the given sentiment phrase whether it is 'positive' or 'negative' (no 'neutral' option for the sentiment subjectivity) and explain the reason in a single sentence. To help you do this task, we also provided background knowledge about sentiment subjectivity stereotypes and some examples of sentiment subjectivity of sentiment phrases from a particular text that you can use as the context when you classify the sentiment subjectivity of the sentiment phrase given and explain the reason for your classification result. Please do not explicitly refer to the background knowledge or the examples in your explanation as the user is not given the background knowledge and examples.\n\nText = {text}\nSentiment Phrase = {st_span}\n\nBackground Knowledge =\n{prompt_pk}\nExamples =\n{examples}\nAnswer = "
        return prompt
    elif prompt_variant == 3:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. Then, provide a short explanation for your classification. You are also provided with potentially useful sentences reflecting background knowledge. The explanation should be clear and helpful for the user to understand the choice.\n\nInstructions:\n- Use the background knowledge and examples to help determine the polarity.\n- Note the sentiment of each background sentence as it may assist in your reasoning.\n- The polarity output can only be 'positive' or 'negative'.\n- The user is not aware of the background knowledge and examples, so you cannot refer to them explicitly in your explanation.\n\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nBackground Knowledge:\n{prompt_pk}\nExamples:\n{examples}\nAnswer: "
        return prompt
    elif prompt_variant == 41 or prompt_variant == 42:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. Then, provide a short explanation for your classification. You are also provided with potentially useful sentences reflecting background knowledge. The explanation should be clear and helpful for the user to understand the choice.\n\nInstructions:\n- Use the background knowledge and examples to help determine the polarity.\n- Note the sentiment of each background sentence as it may assist in your reasoning.\n- The polarity output can only be 'positive' or 'negative'.\n- The first word of your answer should be your final polarity classification, then followed by your explanation.\n- The user is not aware of the background knowledge and examples, so you cannot refer to them explicitly in your explanation.\n\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nBackground Knowledge:\n{prompt_pk}\nExamples:\n{examples}\nAnswer: "
        return prompt
    else:
        raise ValueError(f"You choose variant {prompt_variant} but we do not have it in get_prompt_splitted_stc_pk_ex_with_explanation function. Please define your variant in that function.")

def get_prompt_splitted_stc_ex_with_explanation(text,st_span,negative_example_list,positive_example_list,prompt_variant=1):
    if prompt_variant == 11:
        prompt = f"Given the text and its sentiment phrase below,  please determine the sentiment subjectivity for the given sentiment phrase whether it is 'positive' or 'negative' and explain the reason in a single sentence. To help you do this task, we also provided some examples for sentiment subjectivity of sentiment phrase from a particular text.\nExample 1:\nText = {negative_example_list[0][0]}\nSentiment Phrase = {negative_example_list[0][1]}\nSentiment Subjectivity = {negative_example_list[0][2]}\nExample 2:\nText = {positive_example_list[0][0]}\nSentiment Phrase = {positive_example_list[0][1]}\nSentiment Subjectivity = {positive_example_list[0][2]}\nYour Turn:\nText = {text}\nSentiment Phrase = {st_span}\nAnswer = "
        return prompt
    elif prompt_variant == 12:
        prompt = f"Given the text and its sentiment phrase below,  please determine the sentiment subjectivity for the given sentiment phrase whether it is 'positive' or 'negative' and explain the reason in a single sentence. To help you do this task, we also provided some examples for sentiment subjectivity of sentiment phrase from a particular text.\nExample 1:\nText = {negative_example_list[0][0]}\nSentiment Phrase = {negative_example_list[0][1]}\nSentiment Subjectivity = {negative_example_list[0][2]}\nExample 2:\nText = {negative_example_list[1][0]}\nSentiment Phrase = {negative_example_list[1][1]}\nSentiment Subjectivity = {negative_example_list[1][2]}\nExample 3:\nText = {positive_example_list[0][0]}\nSentiment Phrase = {positive_example_list[0][1]}\nSentiment Subjectivity = {positive_example_list[0][2]}\nExample 4:\nText = {positive_example_list[1][0]}\nSentiment Phrase = {positive_example_list[1][1]}\nSentiment Subjectivity = {positive_example_list[1][2]}\nYour Turn:\nText = {text}\nSentiment Phrase = {st_span}\nAnswer = "
        return prompt
    elif prompt_variant == 21:
        prompt = f"Given the text and its sentiment phrase below,  please determine the sentiment subjectivity for the given sentiment phrase whether it is 'positive' or 'negative' (no 'neutral' option for the sentiment subjectivity) and explain the reason in a single sentence. To help you do this task, we also provided some examples for sentiment subjectivity of sentiment phrase from a particular text. Please do not refer to the examples explicitly in your explanation as the user is not given the examples.\n\nExample 1:\nText = {negative_example_list[0][0]}\nSentiment Phrase = {negative_example_list[0][1]}\nSentiment Subjectivity = {negative_example_list[0][2]}\nExample 2:\nText = {positive_example_list[0][0]}\nSentiment Phrase = {positive_example_list[0][1]}\nSentiment Subjectivity = {positive_example_list[0][2]}\n\nYour Turn:\nText = {text}\nSentiment Phrase = {st_span}\nAnswer = "
        return prompt
    elif prompt_variant == 22:
        prompt = f"Given the text and its sentiment phrase below,  please determine the sentiment subjectivity for the given sentiment phrase whether it is 'positive' or 'negative' (no 'neutral' option for the sentiment subjectivity) and explain the reason in a single sentence. To help you do this task, we also provided some examples for sentiment subjectivity of sentiment phrase from a particular text. Please do not refer to the examples explicitly in your explanation as the user is not given the examples.\n\nExample 1:\nText = {negative_example_list[0][0]}\nSentiment Phrase = {negative_example_list[0][1]}\nSentiment Subjectivity = {negative_example_list[0][2]}\nExample 2:\nText = {negative_example_list[1][0]}\nSentiment Phrase = {negative_example_list[1][1]}\nSentiment Subjectivity = {negative_example_list[1][2]}\nExample 3:\nText = {positive_example_list[0][0]}\nSentiment Phrase = {positive_example_list[0][1]}\nSentiment Subjectivity = {positive_example_list[0][2]}\nExample 4:\nText = {positive_example_list[1][0]}\nSentiment Phrase = {positive_example_list[1][1]}\nSentiment Subjectivity = {positive_example_list[1][2]}\n\nYour Turn:\nText = {text}\nSentiment Phrase = {st_span}\nAnswer = "
        return prompt
    elif prompt_variant == 31:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. Then, provide a short explanation for your classification. You are also provided with some examples. The explanation should be clear and helpful for the user to understand the choice.\n\nInstructions:\n- Use the examples to help determine the polarity.\n- Note the sentiment of each example sentence as it may assist in your reasoning.\n- The polarity output can only be 'positive' or 'negative'.\n- The user is not aware of the examples, so you cannot refer to them explicitly in your explanation.\n\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nExamples:\n1. {negative_example_list[0][0]}. Target Phrase: {negative_example_list[0][1]}. Sentiment: {negative_example_list[0][2]}\n2. {positive_example_list[0][0]}. Target Phrase: {positive_example_list[0][1]}. Sentiment: {positive_example_list[0][2]}\n\nAnswer: "
        return prompt
    elif prompt_variant == 32:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. Then, provide a short explanation for your classification. You are also provided with some examples. The explanation should be clear and helpful for the user to understand the choice.\n\nInstructions:\n- Use the examples to help determine the polarity.\n- Note the sentiment of each example sentence as it may assist in your reasoning.\n- The polarity output can only be 'positive' or 'negative'.\n- The user is not aware of the examples, so you cannot refer to them explicitly in your explanation.\n\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nExamples:\n1. {negative_example_list[0][0]}. Target Phrase: {negative_example_list[0][1]}. Sentiment: {negative_example_list[0][2]}\n2. {negative_example_list[1][0]}. Target Phrase: {negative_example_list[1][1]}. Sentiment: {negative_example_list[1][2]}\n3. {positive_example_list[0][0]}. Target Phrase: {positive_example_list[0][1]}. Sentiment: {positive_example_list[0][2]}\n4. {positive_example_list[1][0]}. Target Phrase: {positive_example_list[1][1]}. Sentiment: {positive_example_list[1][2]}\n\nAnswer: "
        return prompt
    elif prompt_variant == 41:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. Then, provide a short explanation for your classification. You are also provided with some examples. The explanation should be clear and helpful for the user to understand the choice.\n\nInstructions:\n- Use the examples to help determine the polarity.\n- Note the sentiment of each example sentence as it may assist in your reasoning.\n- The polarity output can only be 'positive' or 'negative'.\n- The first word of your answer should be your final polarity classification, then followed by your explanation.\n- The user is not aware of the examples, so you cannot refer to them explicitly in your explanation.\n\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nExamples:\n1. {negative_example_list[0][0]}. Target Phrase: {negative_example_list[0][1]}. Sentiment: {negative_example_list[0][2]}\n2. {positive_example_list[0][0]}. Target Phrase: {positive_example_list[0][1]}. Sentiment: {positive_example_list[0][2]}\n\nAnswer: "
        return prompt
    elif prompt_variant == 42:
        prompt = f"Task: Determine the polarity (either 'positive' or 'negative') of the target phrase from the provided text. Then, provide a short explanation for your classification. You are also provided with some examples. The explanation should be clear and helpful for the user to understand the choice.\n\nInstructions:\n- Use the examples to help determine the polarity.\n- Note the sentiment of each example sentence as it may assist in your reasoning.\n- The polarity output can only be 'positive' or 'negative'.\n- The first word of your answer should be your final polarity classification, then followed by your explanation.\n- The user is not aware of the examples, so you cannot refer to them explicitly in your explanation.\n\nInput:\n- Text: '{text}'\n- Target Phrase: '{st_span}'\n\nExamples:\n1. {negative_example_list[0][0]}. Target Phrase: {negative_example_list[0][1]}. Sentiment: {negative_example_list[0][2]}\n2. {negative_example_list[1][0]}. Target Phrase: {negative_example_list[1][1]}. Sentiment: {negative_example_list[1][2]}\n3. {positive_example_list[0][0]}. Target Phrase: {positive_example_list[0][1]}. Sentiment: {positive_example_list[0][2]}\n4. {positive_example_list[1][0]}. Target Phrase: {positive_example_list[1][1]}. Sentiment: {positive_example_list[1][2]}\n\nAnswer: "
        return prompt
    else:
        raise ValueError(f"You choose variant {prompt_variant} but we do not have it in get_prompt_splitted_stc_pk_with_explanation function. Please define your variant in that function.")